{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","themeIdx","theme","idx","color","colors","dark","backgroundColor","border","light","className","style","mode","id","type","Navbar","str","to","title","aboutText","onClick","setThemeId","document","querySelector","href","name","htmlFor","toUpperCase","slice","toggleMode","placeholder","borderColor","TextForm","useState","text","setText","heading","value","onChange","e","target","rows","showAlert","toLowerCase","navigator","clipboard","writeText","readText","then","copiedText","arr","split","findIndex","splice","length","words","toFixed","defaultProps","Alert","alert","class","role","message","App","setMode","myAlert","setMyAlert","themeId","body","setTimeout","Helmet","bodyAttributes","exact","path","setTheme","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.21c7e12c.chunk.js","sourcesContent":["// import React,{useState} from 'react'\r\n\r\nexport default function About(props) {\r\n    // const [myStyle,setStyle]=useState({\r\n    //     color:'black',\r\n    //     backgroundColor:'white',\r\n    //     border:'1px solid black'\r\n    // });\r\n    // const [btnText,setBtnText]=useState(\"Dark Mode\");\r\n    // let toggleMode=()=>{\r\n    //     if(props.mode==='light'){\r\n    //         setStyle({\r\n    //             color:'white',\r\n    //             backgroundColor:'black',\r\n    //             border:'1px solid white'\r\n    //         });\r\n    //         setBtnText(\"Light Mode\");\r\n    //     }else{\r\n    //         setStyle({\r\n    //             color:'black',\r\n    //             backgroundColor:'white',\r\n    //             border:'1px solid black'\r\n    //         });\r\n    //         setBtnText(\"Dark Mode\");\r\n    //     }\r\n    // };\r\n\r\n    // only this could be used to set mode\r\n\r\n    let themeIdx=props.theme.idx;\r\n    let color=props.theme.colors[themeIdx].color;\r\n\r\n    const dark={\r\n        color:color,\r\n        backgroundColor:'black',\r\n        border:'1px solid white'\r\n    };\r\n    const light={\r\n        color:'white',\r\n        backgroundColor:color,\r\n        border:'1px solid black'\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\" style={props.mode==='light'?light:dark}>\r\n            <h1 className=\"my-3\">About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" type=\"button\" style={props.mode==='light'?light:dark} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                        Accordion Item #1\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={props.mode==='light'?light:dark}>\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" type=\"button\" style={props.mode==='light'?light:dark} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        Accordion Item #2\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={props.mode==='light'?light:dark}>\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" type=\"button\" style={props.mode==='light'?light:dark} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        Accordion Item #3\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={props.mode==='light'?light:dark}>\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* <button class=\"btn btn-primary my-2\" onClick={toggleModeDirect}>{btnText}</button> */}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link, Router} from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    let capitalise=(str)=>{\r\n        return (str[0].toUpperCase()+str.slice(1));\r\n    }\r\n    let themeIdx=props.theme.idx;\r\n    let color=props.theme.colors[themeIdx].color;\r\n\r\n    // function ColorButtons(){\r\n    //     let div=document.createElement('div');\r\n    //     props.theme.colors.forEach((clr,idx)=>{\r\n    //         // div.appendChild((<button class=\"btn\" style={{backgroundColor:clr.color}}>{clr.name}</button>));\r\n    //         div.innerHTML+=`<button class=\"btn\" style=\"backgroundColor:${clr.color}\">${clr.name}</button>`;\r\n    //         console.log((<button class=\"btn\" style={{backgroundColor:clr.color}}>{clr.name}</button>));\r\n    //     });\r\n    //     console.log(div);\r\n    //     return div;\r\n    // }\r\n    // ColorButtons();\r\n\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                        </li>\r\n                    </ul>\r\n                    <div id=\"themeColor\">\r\n                        {/* <ColorButtons/> */}\r\n                        Select theme color:\r\n                        <button className=\"btn mx-1\" onClick={()=>{\r\n                            props.setThemeId(0);\r\n                            document.querySelector(\"link[rel~='icon']\").href=`./favicons/${props.theme.colors[0].name}/favicon.ico`;\r\n                            document.title=\"TextUtils - \"+props.theme.colors[0].name;\r\n                        }} style={{backgroundColor:props.theme.colors[0].color}}>{props.theme.colors[0].name}</button>\r\n                        <button className=\"btn mx-1\" onClick={()=>{\r\n                            props.setThemeId(1);\r\n                            document.querySelector(\"link[rel~='icon']\").href=`./favicons/${props.theme.colors[1].name}/favicon.ico`;\r\n                            document.title=\"TextUtils - \"+props.theme.colors[1].name;\r\n                        }} style={{backgroundColor:props.theme.colors[1].color}}>{props.theme.colors[1].name}</button>\r\n                        <button className=\"btn mx-1\" onClick={()=>{\r\n                            props.setThemeId(2);\r\n                            document.querySelector(\"link[rel~='icon']\").href=`./favicons/${props.theme.colors[2].name}/favicon.ico`;\r\n                            document.title=\"TextUtils - \"+props.theme.colors[2].name;\r\n                        }} style={{backgroundColor:props.theme.colors[2].color}}>{props.theme.colors[2].name}</button>\r\n                        <button className=\"btn mx-1\" onClick={()=>{\r\n                            props.setThemeId(3);\r\n                            document.querySelector(\"link[rel~='icon']\").href=`./favicons/${props.theme.colors[3].name}/favicon.ico`;\r\n                            document.title=\"TextUtils - \"+props.theme.colors[3].name;\r\n                        }} style={{backgroundColor:props.theme.colors[3].color}}>{props.theme.colors[3].name}</button>\r\n                    </div>\r\n                    <div className=\"form-check form-switch mx-3\">\r\n                        <label className={`form-check-label text-${props.mode==='light'?'dark':'light'}`} htmlFor=\"flexSwitchCheckDefault\">{capitalise(props.mode)} Mode</label>\r\n                        <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n                    </div>\r\n                    <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-warning\" type=\"submit\" style={{borderColor:color,color:color}}>Search</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes={\r\n    title:PropTypes.string.isRequired,\r\n    aboutText:PropTypes.string.isRequired\r\n};\r\n\r\nNavbar.defaultProps={\r\n    title:'Set title here',\r\n    aboutText:'Set about here'\r\n};\r\n\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    function changeHandler(e){\r\n        setText(e.target.value);\r\n    }\r\n    let upperHandler=()=>{\r\n        setText(text.toUpperCase());\r\n        props.showAlert('success','Upper Case Applied');\r\n    }\r\n    let lowerHandler=()=>{\r\n        setText(text.toLowerCase());\r\n        props.showAlert('success','Lower Case Applied');\r\n    }\r\n    let clearHandler=()=>{\r\n        setText(\"\");\r\n        props.showAlert('success','Text cleared');\r\n    }\r\n    let copyHandler=()=>{\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert('success','Copied to clipboard');\r\n    }\r\n    let pasteHandler=()=>{\r\n        navigator.clipboard.readText().then(copiedText=>{\r\n            setText(text+copiedText);\r\n        })\r\n        props.showAlert('success','Text pasted');\r\n        \r\n        // navigator.clipboard.readText().then(text => copiedText= text);\r\n    }\r\n    let words=(text)=>{\r\n        let arr=text.split(/[ ]+/);\r\n        let idx=arr.findIndex(e=>e===\"\");\r\n        while(idx!==-1){\r\n            arr.splice(idx,1);\r\n            idx=arr.findIndex(e=>e===\"\");\r\n        }\r\n        return arr.length;\r\n    }\r\n    // function upperHandler(){\r\n    //     setText(text.toUpperCase());\r\n    // }\r\n    const [text,setText]=useState('');\r\n\r\n    let themeIdx=props.theme.idx;\r\n    let color=props.theme.colors[themeIdx].color;\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\">\r\n            <h2 style={{'color':props.mode==='light'?'#4a4a4a':'#ddd'}}>{props.heading}</h2>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={changeHandler} style={{'color':props.mode==='light'?'black':color,'backgroundColor':props.mode==='light'?'white':'#1e1e1e','fontSize':'50px'}} id=\"myBox\" rows=\"6\"></textarea>\r\n            </div>\r\n            <button className={`btn mx-1`} style={{'backgroundColor':props.mode==='light'?'white':color}} onClick={upperHandler}>To UpperCase</button>\r\n            <button className={`btn mx-1`} style={{'backgroundColor':props.mode==='light'?'white':color}} onClick={lowerHandler}>To LowerCase</button>\r\n            <button className={`btn mx-1`} style={{'backgroundColor':props.mode==='light'?'white':color}} onClick={clearHandler}>Clear</button>\r\n            <button className={`btn mx-1`} style={{'backgroundColor':props.mode==='light'?'white':color}} onClick={copyHandler}>Copy to Clipboard</button>\r\n            <button className={`btn mx-1`} style={{'backgroundColor':props.mode==='light'?'white':color}} onClick={pasteHandler}>Paste</button>\r\n        </div>\r\n        <div className=\"container my-3\">\r\n            <h3 style={{'color':props.mode==='light'?'#4a4a4a':'#ddd'}}>Your summary here</h3>\r\n            <p style={{'color':props.mode==='light'?'#4a4a4a':'#ddd'}}>{words(text)} words, {text.length} characters</p>\r\n            <p style={{'color':props.mode==='light'?'#4a4a4a':'#ddd'}}>{(0.0016*text.length).toFixed(4)} Minutes total read time</p>\r\n        </div>\r\n        </>\r\n        )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    let capitalise=(str)=>{\r\n        return (str[0].toUpperCase()+str.slice(1));\r\n    }\r\n    return (\r\n        props.alert&&<div class={`alert alert-${props.alert.type}`} role=\"alert\">\r\n        <strong>{capitalise(props.alert.type)}:</strong> {props.alert.message}\r\n    </div>\r\n    )\r\n}\r\n","import './App.css';\r\nimport About from './components/About';\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\nimport React, { useState } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport Alert from './components/Alert';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nfunction App() {\r\n  const [mode,setMode]=useState('light');\r\n  const [myAlert,setMyAlert]=useState(null);\r\n  const [themeId, setThemeId] = useState(0);\r\n  let theme={idx:themeId,colors:[{color:\"rgb(255,193,7)\",name:\"Golden\"},{color:\"rgb(255,7,76)\",name:\"Lady Pink\"},{color:\"rgb(0,255,31)\",name:\"Lime Green\"},{color:\"rgb(0,149,255)\",name:\"Aqua\"}]};\r\n  let themeIdx=theme.idx;\r\n  let color=theme.colors[themeIdx].color;\r\n  let toggleMode=()=>{\r\n    if(mode==='light'){\r\n      setMode('dark');\r\n      document.body.style.backgroundColor='#131313';\r\n      showAlert('success','Dark mode enabled');\r\n    } \r\n    else{\r\n      setMode('light');\r\n      document.body.style.backgroundColor=color;\r\n      showAlert('success','Light mode enabled');\r\n    } \r\n  }\r\n  const showAlert=(type,message)=>{\r\n    setMyAlert({type:type,message:message});\r\n    setTimeout(()=>{setMyAlert(null)},1500);\r\n  };\r\n    return ( \r\n      <>\r\n      <Router>\r\n        \r\n        <Helmet bodyAttributes={{style: `background-color : ${mode==='light'?color:'#131313'}`}}/>\r\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} theme={theme} setThemeId={setThemeId}/>\r\n        \r\n        <div className=\"container my-3\">\r\n          <Switch>\r\n            <Route exact path=\"/about\">\r\n              <About mode={mode} toggleMode={toggleMode} theme={theme}/>\r\n            </Route>\r\n            <Route exact path=\"/\">\r\n              <TextForm heading=\"Enter your text here\" mode={mode} showAlert={showAlert} theme={theme} setTheme={setThemeId}/>\r\n            </Route>\r\n            <Route exact path=\"/ReactJs-TextUtils\">\r\n              <TextForm heading=\"Enter your text here\" mode={mode} showAlert={showAlert} theme={theme} setTheme={setThemeId}/>\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n        <div className=\"container\">\r\n          <Alert alert={myAlert}/>\r\n        </div>\r\n        </Router>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}